if(falta_modificar>0){if(falta_modificar<=cabe_c1){ # do que falta cabe tudo na primeira coluna?
matrix_agr_min[which(matrix_agr_min[,1]==mudar_de)[1:falta_modificar],1]<-mudar_para # se sim resolve tudo aqui e termina de montar a figura
}else{ # se nao modifica todos da primeira linha e vamos para proxima, a logica vai se repetira nas linhas mais extremas
falta_modificar<-falta_modificar-cabe_c1
matrix_agr_min[which(matrix_agr_min[,1]==mudar_de),1]<-mudar_para}}
cabe_cu<-length(which(matrix_agr_min[,largura]==mudar_de)) # quanto cabe na ultima linha - 3
if(falta_modificar>0){if(falta_modificar<=cabe_cu){ # do que falta cabe tudo na ultima coluna?
matrix_agr_min[which(matrix_agr_min[,largura]==mudar_de)[1:falta_modificar],largura]<-mudar_para# se sim resolve tudo aqui e termina de montar a figura
}else{ # se nao modifica todos da primeira linha e vamos para proxima, a logica vai se repetira nas linhas mais extremas
falta_modificar<-falta_modificar-cabe_cu
matrix_agr_min[which(matrix_agr_min[,largura]==mudar_de),largura]<-mudar_para}}
######################################################
# Pintado as laterais, falta pintar as bordas com NA #
######################################################
localizacao_linha<-NULL
localizacao_coluna<-NULL
for (c in 2:(largura-1) ) {
for (l in 2:(altura-1) ) {
if(falta_modificar>0&(!is.na(matrix_agr_min[l,c])&(matrix_agr_min[l,c]==mudar_de&(is.na(matrix_agr_min[l-1,c])|is.na(matrix_agr_min[l+1,c])|is.na(matrix_agr_min[l,c-1])|is.na(matrix_agr_min[l,c+1]))))){
localizacao_linha<-c(localizacao_linha,l)
localizacao_coluna<-c(localizacao_coluna,c)
falta_modificar<-falta_modificar-1
}}}
if(length(localizacao_linha)>0){
for(i in 1:length(localizacao_linha)){
matrix_agr_min[localizacao_linha[i],localizacao_coluna[i]]<-mudar_para }}
######################################################
# Preencher o centro com pixeis pretos circuladamente #
######################################################
# while que vai preenchendo pelo meio
rodada<-0
while(falta_modificar>0){
rodada<-rodada+1
cabe_l1<-length(which(matrix_agr_min[rodada+1,]==mudar_de))
if(falta_modificar>0){if(falta_modificar<=cabe_l1){
matrix_agr_min[rodada+1,which(matrix_agr_min[rodada+1,]==mudar_de)[1:falta_modificar]]<-mudar_para
falta_modificar<-0
}else{falta_modificar<-falta_modificar-cabe_l1
matrix_agr_min[rodada+1,which(matrix_agr_min[rodada+1,]==mudar_de)]<-mudar_para}}
cabe_lu<-length(which(matrix_agr_min[altura-rodada,]==mudar_de))
if(falta_modificar>0){if(falta_modificar<=cabe_lu){
matrix_agr_min[altura-rodada,which(matrix_agr_min[altura-rodada,]==mudar_de)[1:falta_modificar]]<-mudar_para
falta_modificar<-0
}else{falta_modificar<-falta_modificar-cabe_lu
matrix_agr_min[altura-rodada,which(matrix_agr_min[altura-rodada,]==mudar_de)]<-mudar_para}}
cabe_c1<-length(which(matrix_agr_min[,rodada+1]==mudar_de))
if(falta_modificar>0){if(falta_modificar<=cabe_c1){
matrix_agr_min[which(matrix_agr_min[,rodada+1]==mudar_de)[1:falta_modificar],rodada+1]<-mudar_para
falta_modificar<-0
}else{falta_modificar<-falta_modificar-cabe_c1
matrix_agr_min[which(matrix_agr_min[,rodada+1]==mudar_de),rodada+1]<-mudar_para}}
cabe_cu<-length(which(matrix_agr_min[,largura-rodada]==mudar_de))
if(falta_modificar>0){if(falta_modificar<=cabe_cu){
matrix_agr_min[which(matrix_agr_min[,largura-rodada]==mudar_de)[1:falta_modificar],largura-rodada]<-mudar_para
falta_modificar<-0
}else{
falta_modificar<-falta_modificar-cabe_cu
matrix_agr_min[which(matrix_agr_min[,largura-rodada]==mudar_de),largura-rodada]<-mudar_para}}}
min.index<-basic_aggregation_index(matrix_agr_min)
return(min.index)}
#' Maximum aggregation index calculator for matrix with transparent pixels
#'
#' Based on a given matrix, calculate de maximum possible aggregation index for matrix with transparent pixels
#' @param imagematrix data matrix
#' @return maximum aggregation index
max_aggregation_with_transparence <-function(imagematrix){
largura<-length(imagematrix[1,]); altura<-length(imagematrix[,1])
if(altura>largura){imagematrix<-apply(imagematrix, 1, rev);largura<-length(imagematrix[1,]); altura<-length(imagematrix[,1])}
pixeis_org<-subset(as.vector(imagematrix), !is.na(as.vector(imagematrix)))
if(mean(pixeis_org)>0.5){mudar_de<-1; mudar_para<-0}else{mudar_de<-0; mudar_para<-1}
px_preto_org<-sum(pixeis_org)
px_branco_org<-length(pixeis_org)-sum(pixeis_org)
dif_org<-px_preto_org-px_branco_org
matrix_agr_max<-matrix(mudar_de,ncol=largura,nrow=altura)
# gerar uma matrix auxiliar para calculo da agregacao maxima
for(c in 1:largura){;for(l in 1:altura){;if(is.na(imagematrix[l,c]) ){matrix_agr_max[l,c]<-NA }}} # Fazemos o espelhamento dos pontos de transparencia da imagem original
falta_modificar<-min(px_preto_org,px_branco_org)
# pintar as quinas
if(!is.na(matrix_agr_max[1,1])){if(falta_modificar>0&matrix_agr_max[1,1]==mudar_de)
{matrix_agr_max[1,1]<-mudar_para ; falta_modificar<-falta_modificar-1}}
if(!is.na(matrix_agr_max[altura,1])){if(falta_modificar>0&matrix_agr_max[altura,1]==mudar_de)
{ matrix_agr_max[altura,1]<-mudar_para; falta_modificar<-falta_modificar-1}}
if(!is.na(matrix_agr_max[1,largura])){if(falta_modificar>0&matrix_agr_max[1,largura]==mudar_de)
{matrix_agr_max[1,largura]<-mudar_para; falta_modificar<-falta_modificar-1}}
if(!is.na(matrix_agr_max[altura,largura])){if(falta_modificar>0&matrix_agr_max[altura,largura]==mudar_de)
{matrix_agr_max[altura,largura]<-mudar_para; falta_modificar<-falta_modificar-1}}
# se ainda sobrou fazer pintar as colunas internas
if(falta_modificar>0){
pixeis_para_mudar_por_coluna<-NULL # objeto que vai contar quantos pixeis tem disponivel para mudar de  cor em cada coluna
for( i in 1:largura){
aux_pixeis<-subset(as.vector(matrix_agr_max[,i]), !is.na(as.vector(matrix_agr_max[,i])))
pixeis_para_mudar_por_coluna[i]<-length(aux_pixeis)-sum(aux_pixeis==mudar_para)}
acumulado_pixeis_para_mudar<-NULL
for( i in 1:largura){
acumulado_pixeis_para_mudar[i]<-sum(pixeis_para_mudar_por_coluna[1:i])}
coluna_completa<-which(acumulado_pixeis_para_mudar>falta_modificar)[1]-1 # colunas que tem que estar com 1 em todo o espaco
coluna_completa<-as.numeric(coluna_completa)
if(!coluna_completa==0){ # temos mais de 1 coluna
total_preenchido<- acumulado_pixeis_para_mudar[coluna_completa] # total de pixeis que vao ser preenchidos com as colunas completas
px_ult_coluna<-falta_modificar-total_preenchido #pixeis da proxima coluna que vao ter que ser preenchidos
for(c in 1:coluna_completa){;
for(l in 1:altura){;
if(!is.na(imagematrix[l,c])){
if(matrix_agr_max[l,c]==mudar_de){
matrix_agr_max[l,c]<-mudar_para;
falta_modificar<-falta_modificar-1 }}}}}else{#caso especial onde vai ser pintado so a primeira coluna
px_ult_coluna<-falta_modificar  #pixeis da primeira coluna que vao ter que ser pintados
}}
if(falta_modificar>0){pixeis_para_modificar<-which(matrix_agr_max[,coluna_completa+1]==mudar_de)[1:px_ult_coluna] # numero dos pixeis que vao mudar
for(i in 1:px_ult_coluna){matrix_agr_max[pixeis_para_modificar[i],coluna_completa+1]<-mudar_para;falta_modificar<-falta_modificar-1}}
max.index<-basic_aggregation_index(matrix_agr_max)
return(max.index)}
#' Adjusted aggregation index calculator for matrix with transparent pixels
#'
#' Based on a given matrix, calculate de adjusted aggregation index for matrix with transparent pixels. For this, the minimum and maximum possible aggregation index are calculated, than the observed index is placed between this range. Adjusted aggregation index = 0 means that the pixels are set in the minimum possible aggregation. On the other hand, aggregation index = 1 means that the pixels are set in the maximum possible aggregation.
#' @param imagematrix data matrix
#' @return adjusted aggregation index
ajusted_aggregation_with_transparence <-function(imagematrix){
min.index<-min_aggregation_with_transparence(imagematrix)
max.index<-max_aggregation_with_transparence(imagematrix)
observed<-basic_aggregation_index(imagematrix)
range<-max.index-min.index
obs.corrigido<-observed-min.index
valor_corrigido<- obs.corrigido/range
return( valor_corrigido)}
############################################################################
########       Aggregation index calculator for any image           ########
############################################################################
#' Ajusted aggregation index calculator for any matrix
#'
#' Based on a given matrix, calculate de minimum possible aggregation index for any matrix
#' @param imagematrix data matrix
#' @return minimum aggregation index
#' @export
aggregation_index<-function(imagematrix){
if(length(subset(as.vector(imagematrix), is.na(as.vector(imagematrix))))>1){
ajusted_aggregation<-ajusted_aggregation_with_transparence(imagematrix)
non_ajusted_aggregation<-basic_aggregation_index(imagematrix)
}else{
ajusted_aggregation<-ajusted_aggregation_wo_transparence(imagematrix)
non_ajusted_aggregation<-basic_aggregation_index(imagematrix)
}
resposta <- c(ajusted_aggregation,non_ajusted_aggregation)
names(resposta)<-c("ajusted_aggregation","non_ajusted_aggregation")
return(resposta)}
library("tiziu", lib.loc="~/R/win-library/3.5")
remove.packages("tiziu", lib="~/R/win-library/3.5")
install.packages("D:/Nuvem/Dropbox/Artigos em trabalho/2019 Biagolini-Jr Macedo Pacote GenTag/GenTag_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/Nuvem/Dropbox/Artigos em trabalho/2019 Biagolini-Jr Macedo Pacote bwimage/Construcao pacote/roxygen2/turdus_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("jpeg")
install.packages("png")
install.packages("D:/Nuvem/Dropbox/Artigos em trabalho/2019 Biagolini-Jr Macedo Pacote bwimage/Construcao pacote/roxygen2/turdus_0.1.0.tar.gz", repos = NULL, type = "source")
# First, get a matrix for your image. Here an example of a bush image is used.
bush<-system.file("extdata/bush.JPG",package ="turdus")
bush_imagematrix<-threshold_color(bush,  "jpeg",  "proportional", compress_rate = 0.1)
library("turdus")
threshold_color
bush_imagematrix<-threshold_color(bush,  "jpeg",  "proportional", compress_rate = 0.1)
# Calculate vegetation denseness in 20 column sections
denseness_column(bush_imagematrix,20)
remove.packages("turdus", lib="~/R/win-library/3.5")
remove.packages("jpeg", lib="~/R/win-library/3.5")
remove.packages("png", lib="~/R/win-library/3.5")
install.packages("D:/Nuvem/Dropbox/Artigos em trabalho/2019 Biagolini-Jr Macedo Pacote bwimage/Construcao pacote/00 montar pacote/bwimage_1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/Nuvem/Dropbox/Artigos em trabalho/2019 Biagolini-Jr Macedo Pacote bwimage/Construcao pacote/00 montar pacote/bwimage_1.0.tar.gz", repos = NULL, type = "source")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("png")
install.packages("jpeg")
install.packages("D:/Nuvem/Dropbox/Artigos em trabalho/2019 Biagolini-Jr Macedo Pacote bwimage/Construcao pacote/00 montar pacote/bwimage_1.0.tar.gz", repos = NULL, type = "source")
remove.packages("png", lib="~/R/win-library/3.5")
remove.packages("jpeg", lib="~/R/win-library/3.5")
remove.packages("bwimage", lib="~/R/win-library/3.5")
install.packages("D:/Nuvem/Dropbox/Artigos em trabalho/2019 Biagolini-Jr Macedo Pacote bwimage/Construcao pacote/00 montar pacote/bwimage_1.0.tar.gz", repos = NULL, type = "source")
rnom(100,5,5)
?rnom
rnorm(100,mean=50,sd=5)
library(mgcv)
install.packages("blogdown")
install.packages("blogdown")
blogdown::install_hugo(force = TRUE)
2+2
4-2
#_________________________________________________________________________
#### Importar seu conjunto de dados para o R
## Opção 1: via Google Drive
LinkAcessoDrive<-"https://docs.google.com/spreadsheets/d/e/2PACX-1vSCs8v24iihB5rt6nTymB9XzC09FntNgqeG9IwlBUQVctM13ysoAZqllo-m6nQ86Q/pub?gid=943653026&single=true&output=csv"; tabela1<-read.csv(url(LinkAcessoDrive), sep = ",",dec = "."); rm(LinkAcessoDrive); tabela1$Sexo<-as.factor(tabela1$Sexo)
View(tabela1)
# 2. Dados tem distribuição normal?
hist(tabela1$Sono)
boxplot(tabela1$Sono~tabela1$Sexo)
# Aplicar o teste, obs: Variancias iguais: var.equal=T; Variancias diferentes: var.equal=F
t.test(tabela1$Sono~tabela1$Sexo, var.equal = T)
View(tabela1)
# 2. Dados tem distribuição normal?
hist(tabela1$Altura) # Essa figura engana, se aqui você olhar só isso você vai pensar que os dados não são normais
boxplot(tabela1$Altura~tabela1$Sexo) # Mas na pratica os dados são normais sim. Só que esse conjunto de dados tem medianas  e variancias diferentes
# Aplicar o teste, obs: Variancias iguais: var.equal=T; Variancias diferentes: var.equal=F
t.test(tabela1$Altura~tabela1$Sexo, var.equal = F)
# Por curiosidade, veja se se você definir que as variâncias são iguais (que está errado nese caso) valor de p calculado muda.
t.test(tabela1$Altura~tabela1$Sexo, var.equal = T)
# Aplicar o teste, obs: Variancias iguais: var.equal=T; Variancias diferentes: var.equal=F
t.test(tabela1$Altura~tabela1$Sexo)
# 2. Dados tem distribuição normal?
hist(tabela1$Peso)
boxplot(tabela1$Peso~tabela1$Sexo) # Como se você estivesse olhando a distribuição dos dados de cima
# Aplicar o teste de Wilcoxon-Mann-Whitney:
wilcox.test(tabela1$Peso~tabela1$Sexo)
# Aplicar o teste, obs: Variancias iguais: var.equal=T; Variancias diferentes: var.equal=F
t.test(tabela1$Altura~tabela1$Sexo, var.equal = F)
View(tabela1)
install.packages("‘BenfordTests’")
## Testing for population probabilities
## Case A. Tabulated data
x <- c(A = 20, B = 15, C = 25)
chisq.test(x)
x
chisq.test(x)
chisq.test(as.table(x))             # the same
x <- c(89,37,30,28,2)
p <- c(40,20,20,15,5)
chisq.test(x, p = p)
# Importar tabela (xlsx)
library(openxlsx)
tabela1=read.xlsx("Dados Fleury.xlsx")
# Definir fatores (forçar com que o R entenda que algumas variaveis são categoricas)
tabela1$Sexo<-as.factor(tabela1$Sexo); tabela1$UF<-as.factor(tabela1$UF) ; tabela1$CategoriaIdade<-as.factor(tabela1$CategoriaIdade)
############################## teste de chiquadrado
(tbl = table(tabela1$UF, tabela1$Covid19PCR ) )
# setwd(choose.dir())
setwd("D:/Nuvem/Dropbox/UNISA/2020 Estatistica aplicada a saude publica/10 Quiquadrado/Arquivos para passar para os alunos")
# Importar tabela (xlsx)
library(openxlsx)
tabela1=read.xlsx("Dados Fleury.xlsx")
# Definir fatores (forçar com que o R entenda que algumas variaveis são categoricas)
tabela1$Sexo<-as.factor(tabela1$Sexo); tabela1$UF<-as.factor(tabela1$UF) ; tabela1$CategoriaIdade<-as.factor(tabela1$CategoriaIdade)
######### Aderencia
(tbl = table(tabela1$UF, tabela1$Covid19PCR ) )
tbl[,1~]
tbl[,1]
chisq.test(tbl[,1], p = c=(1/3,1/3,1/3))
chisq.test(tbl[,1], p = c(1/3,1/3,1/3))
(tbl = table(tabela1$Covid19PCR, tabela1$UF ) )
######### Aderencia
(tbl = table(tabela1$UF, tabela1$Covid19PCR ) )
(tbl = table(tabela1$Covid19PCR, tabela1$UF ) )
############################## teste de chiquadrado
(tbl = table(tabela1$UF, tabela1$Covid19PCR ) )
(tbl = table(tabela1$Covid19PCR, tabela1$UF ) )
chisq.test(tbl)
16
3/16
53/25
(tbl = table(tabela1$Covid19PCR, tabela1$UF ) )
3/16
25/53
72/412
## Opção 2: Importar tabela via documento salvo no seu computador
# Definir diretorio
# setwd(choose.dir())
setwd("D:/Nuvem/Dropbox/UNISA/2020 Estatistica aplicada a saude publica/10 Teste de aderencia/Arquivos para passar para os alunos")
# Importar tabela (xlsx)
library(openxlsx)
tabela1=read.xlsx("DadosHospital.xlsx")
tabela2=read.xlsx("DadosRenda.xlsx")
View(tabela1)
names(tabela1)
chisq.test(tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios)
?chisq.test
chisq.test(tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios, simulate.p.value = TRUE)
names(tabela2)
chisq.test(tabela12$PorporcaoObesidade, p = tabela1$ProporcaoIBGE)
chisq.test(tabela2$PorporcaoObesidade, p = tabela2$ProporcaoIBGE)
chisq.test(tabela2$PorporcaoObesidade, p = tabela2$ProporcaoIBGE, simulate.p.value = TRUE)
chisq.test(tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios)
tabela1$PorporcaoCovid
tabela1$ProporcaoFuncionarios
chisq.test(x=c(0.9,0.05,0.05), p = c(0.4,0.4,0.1))
chisq.test(x=c(0.9,0.05,0.05), p = c(0.4,0.4,0.2))
chisq.test(x=c(0.9,0.05,0.05), p = c(0.1,0.7,0.2))
## Opção 2: Importar tabela via documento salvo no seu computador
# Definir diretorio
# setwd(choose.dir())
setwd("D:/Nuvem/Dropbox/UNISA/2020 Estatistica aplicada a saude publica/10 Teste de aderencia/Arquivos para passar para os alunos")
# Importar tabela (xlsx)
library(openxlsx)
tabela1=read.xlsx("DadosHospital.xlsx")
tabela2=read.xlsx("DadosRenda.xlsx")
chisq.test(tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios)
names(tabela1)
chisq.test(tabela1$PorporcaoCovid, p = tabela1$PorporcaoCovid)
chisq.test(tabela1$PorporcaoFamiliariesCovid, p = tabela1$ProporcaoFuncionarios)
chisq.test(tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios)
View(tabela1)
# Importar tabela (xlsx)
library(openxlsx)
tabela1=read.xlsx("DadosHospital.xlsx")
tabela2=read.xlsx("DadosRenda.xlsx")
chisq.test(tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios)
tabela1
tabela1=read.xlsx("DadosHospital.xlsx")
tabela2=read.xlsx("DadosRenda.xlsx")
tabela1
chisq.test(tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios)
chisq.test(x = tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios)
chisq.test(x = tabela1$PorporcaoCovid, p = tabela1$ProporcaoFuncionarios, rescale.p = T)
#_________________________________________________________________________
### Pegunta 1. A COVID foi proporcionalmente distribuída  entre os diferentes profissionais da saúde de um hospital?
pcovid<-
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
#_________________________________________________________________________
### Pegunta 1. A COVID foi proporcionalmente distribuída  entre os diferentes profissionais da saúde de um hospital?
pcovid<-
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios)
tabela1
a<-c(100,20,3,3)
b<-c(75,18,1,1)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,3,3)
b<-c(85,18,1,1)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,3,3)
b<-c(85,18,0,1)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,3,3)
b<-c(85,18,1,0)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,5,5)
b<-c(90,18,1,1)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,5,5)
b<-c(85,18,1,1)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,5,5)
b<-c(85,18,2,1)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,5,5)
b<-c(85,18,2,2)
chisq.test(x = a, p = b, rescale.p = T)
a<-c(100,20,5,5)
b<-c(85,18,2,1)
chisq.test(x = a, p = b, rescale.p = T)
tabela1=read.xlsx("DadosHospital.xlsx")
tabela2=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
tabela1
a<-c(100,20,3,3)
b<-c(85,18,2,1)
chisq.test(x = a, p = b, rescale.p = T)
tabela1=read.xlsx("DadosHospital.xlsx")
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
tabela1
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
a<-c(100,20,5,5)
b<-c(85,18,2,1)
chisq.test(x = a, p = b, rescale.p = T)
tabela1$Covid
chisq.test(x = b, p = a, rescale.p = T)
## Testing for population probabilities
## Case A. Tabulated data
x <- c(A = 20, B = 15, C = 25)
x
chisq.test(x)
chisq.test(as.table(x))             # the same
as.table(x)
x <- c(89,37,30,28,2)
p <- c(40,20,20,15,5)
chisq.test(x, p = p)
chisq.test(x, p = p, rescale.p = TRUE)
# Expected count in category 5
# is 1.86 < 5 ==> chi square approx.
chisq.test(x, p = p)            #               maybe doubtful, but is ok!
chisq.test(x, p = p, simulate.p.value = TRUE)
a<-c(100,20,5,5)
b<-c(85,18,2,1)
chisq.test(x = b, p = a, rescale.p = T)
a<-c(100,20,5,5)
b<-c(85,18,1,1)
chisq.test(x = b, p = a, rescale.p = T)
a<-c(300,20,5,5)
b<-c(85,18,1,1)
chisq.test(x = b, p = a, rescale.p = T)
a<-c(300,80,15,15)
b<-c(251,67,3,3)
chisq.test(x = b, p = a, rescale.p = T)
tabela1=read.xlsx("DadosHospital.xlsx")
tabela1
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
chisq.test(x = tabela1$Covid, p = tabela1$Familiares, rescale.p = T)
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
chisq.test(x = tabela1$Covid, p = tabela1$Familiares, rescale.p = T)
chisq.test(x = tabela1$Covid, p = tabela1$Funcionarios, rescale.p = T)
chisq.test(x = tabela1$Covid, p = tabela1$Familiares, rescale.p = T)
tabela1$Familiares
a<-c(300,80,15,15)
b<-c(200,50,3,3)
chisq.test(x = b, p = a, rescale.p = T)
a<-c(300,80,15,15)
b<-c(200,50,3,3)
chisq.test(x = b, p = a, rescale.p = T)
chisq.test(x = tabela1$Familiares, p = tabela1$Funcionarios, rescale.p = T)
a<-c(300,80,15,15)
b<-c(200,50,3,3)
chisq.test(x = b, p = a, rescale.p = T)
a<-c(300,80,15,15)
b<-c(200,60,3,3)
chisq.test(x = b, p = a, rescale.p = T)
b<-c(150,60,3,3)
chisq.test(x = b, p = a, rescale.p = T)
b<-c(150,40,3,3)
chisq.test(x = b, p = a, rescale.p = T)
tabela1=read.xlsx("DadosHospital.xlsx")
chisq.test(x = tabela1$Familiares, p = tabela1$Funcionarios, rescale.p = T)
#_________________________________________________________________________
### Pegunta 2. A COVID foi proporcionalmente distribuída  entre os diferentes profissionais da saúde de um hospital?
chisq.test(x = tabela2$Covid, p = tabela2$Funcionarios, rescale.p = T)
library(openxlsx)
tabela1=read.xlsx("DadosRenda.xlsx")
tabela2=read.xlsx("DadosHospital.xlsx")
library(openxlsx)
tabela1=read.xlsx("DadosRenda.xlsx")
tabela2=read.xlsx("DadosHospital.xlsx")
#_________________________________________________________________________
### Pegunta 2. A COVID foi proporcionalmente distribuída  entre os diferentes profissionais da saúde de um hospital?
chisq.test(x = tabela2$Covid, p = tabela2$Funcionarios, rescale.p = T)
tabela1
chisq.test(x = tabela1$PorporcaoObesidade , p = tabela1$ProporcaoIBGE )
a<-c(0.04,0.11,0.38,0.26,0.21)
b<-c(0.05,0.10,0.35,0.3,0.2)
chisq.test(x = b, p = a)
a<-c(0.04,0.11,0.38,0.26,0.21)
b<-c(0.03,0.09,0.35,0.3,0.2)
chisq.test(x = b, p = a)
tabela1$ProporcaoIBGE
a<-c(0.01,0.09,0.40,0.25,0.25)
b<-c(0.05,0.10,0.35,0.3,0.2)
chisq.test(x = b, p = a)
a<-c(0.01,0.09,0.50,0.2,0.2)
b<-c(0.05,0.10,0.35,0.3,0.2)
chisq.test(x = b, p = a)
a<-c(0.01,0.09,0.50,0.2,0.2)
b<-c(0.05,0.10,0.35,0.3,0.2)
chisq.test(x = b, p = a)
a<-c(0.01,0.04,0.50,0.2,0.25)
b<-c(0.05,0.10,0.35,0.3,0.2)
chisq.test(x = b, p = a)
tabela1=read.xlsx("DadosRenda.xlsx")
tabela2=read.xlsx("DadosHospital.xlsx")
chisq.test(x = tabela1$PorporcaoObesidade , p = tabela1$ProporcaoIBGE )
chisq.test(x = tabela1$PorporcaoObesidade , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
tabela1
# Atividade lista
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE )
# Atividade lista
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
tabela1=read.xlsx("DadosRenda.xlsx")
# Atividade lista
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
tabela1
chisq.test(x = tabela1$PorporcaoObesidade , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
tabela1
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, simulate.p.value = TRUE)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE)
tabela1
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE)
## Opção 2: Importar tabela via documento salvo no seu computador
# Definir diretorio
# setwd(choose.dir())
setwd("D:/Nuvem/Dropbox/UNISA/2020 Estatistica aplicada a saude publica/10 Teste de aderencia/Arquivos para passar para os alunos")
# Importar tabela (xlsx)
library(openxlsx)
tabela1=read.xlsx("DadosRenda.xlsx")
View(tabela1)
chisq.test(x = tabela1$ProporcaoDengue , p = tabela1$ProporcaoIBGE, rescale.p = T)
chisq.test(x = tabela1$TotalDengue , p = tabela1$ProporcaoIBGE, rescale.p = T)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
tabela1
chisq.test(x = tabela1$PorporcaoObesidade , p = tabela1$ProporcaoIBGE )
chisq.test(x = tabela1$TotalObesidae , p = tabela1$ProporcaoIBGE , rescale.p = T)
# Atividade lista
tabela1=read.xlsx("DadosRenda.xlsx")
chisq.test(x = tabela1$PorporcaoObesidade , p = tabela1$ProporcaoIBGE )
chisq.test(x = tabela1$TotalObesidae , p = tabela1$ProporcaoIBGE , rescale.p = T)
chisq.test(x = tabela1$TotalDengue , p = tabela1$ProporcaoIBGE, rescale.p = T)
tabela1
chisq.test(x = tabela1$ContagemlDengue , p = tabela1$ProporcaoIBGE, rescale.p = T)
